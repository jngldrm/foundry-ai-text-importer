name: Alpha Release

on:
  push:
    branches:
      - develop

env:
  node_version: 20

jobs:
  alpha-build:
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Install node
      - name: install node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.node_version }}
      
      # Cache modules
      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: .npm
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-
            ${{ runner.OS }}-

      - run: npm install --legacy-peer-deps

      - run: npm run build

      # Get the base version from built 'module.json'
      - name: Get Base Version
        shell: bash
        id: get-base-version
        run: echo "::set-output name=version::$(node ./.github/workflows/get-version.js)"

      # Generate alpha version with timestamp
      - name: Generate Alpha Version
        shell: bash
        id: get-alpha-version
        run: |
          BASE_VERSION="${{ steps.get-base-version.outputs.version }}"
          TIMESTAMP=$(date +"%Y%m%d%H%M")
          ALPHA_VERSION="${BASE_VERSION}-alpha.${TIMESTAMP}"
          echo "::set-output name=version::$ALPHA_VERSION"
          echo "Alpha version: $ALPHA_VERSION"

      # Update module.json with alpha version
      - name: Update module.json with alpha version
        run: |
          jq '.version = "${{ steps.get-alpha-version.outputs.version }}"' ./dist/module.json > tmp.json && mv tmp.json ./dist/module.json

      - name: Get Foundry Compatibility
        shell: bash
        id: get-foundry-compatibility
        run: |
          MIN_FOUNDRY_COMPATIBILITY=$(jq -r '.compatibility.minimum' ./dist/module.json)
          MAX_FOUNDRY_COMPATIBILITY=$(jq -r '.compatibility.maximum' ./dist/module.json)
          VERIFIED_FOUNDRY_COMPATIBILITY=$(jq -r '.compatibility.verified' ./dist/module.json)

          echo "::set-output name=minFoundryCompatibility::$MIN_FOUNDRY_COMPATIBILITY"
          echo "::set-output name=maxFoundryCompatibility::$MAX_FOUNDRY_COMPATIBILITY"
          echo "::set-output name=verifiedFoundryCompatibility::$VERIFIED_FOUNDRY_COMPATIBILITY"

      # Substitute Manifest and Download Links For Alpha Release
      - name: Substitute Manifest and Download Links For Alpha Release
        id: sub_manifest_link_alpha
        uses: microsoft/variable-substitution@v1
        with:
          files: './dist/module.json'
        env:
          url: https://github.com/${{github.repository}}
          manifest: https://github.com/${{github.repository}}/releases/download/${{ steps.get-alpha-version.outputs.version }}/module.json
          download: https://github.com/${{github.repository}}/releases/download/${{ steps.get-alpha-version.outputs.version }}/module.zip

      # Create a zip file with all files required by the module
      - name: Zip Alpha Release
        working-directory: ./dist
        run: zip -r ../module.zip ./*

      # Create an alpha pre-release (does NOT publish to Foundry Hub)
      - name: Create Alpha Pre-Release
        id: create_alpha_release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: false
          name: "Alpha ${{ steps.get-alpha-version.outputs.version }} üß™"
          body: |
            ## ‚ö†Ô∏è Alpha Release - Testing Only

            This is an **alpha/development release** for testing new features and bug fixes.
            
            **‚ö†Ô∏è NOT RECOMMENDED FOR PRODUCTION USE**
            
            ### üß™ For Testing:
            1. Download the `module.zip` from this release
            2. Extract to your FoundryVTT modules folder
            3. Or install via manifest URL: `https://github.com/${{github.repository}}/releases/download/${{ steps.get-alpha-version.outputs.version }}/module.json`
            
            ### üêõ Debug Features Enabled:
            - Detailed console logging for item parsing
            - Enhanced error reporting
            - Development debug outputs
            
            ### üìä Based on commit:
            ${{ github.sha }}
            
            **Please report any issues on the GitHub Issues page.**
          draft: false
          prerelease: true  # Mark as pre-release so it doesn't appear as "latest"
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: './dist/module.json, ./module.zip'
          tag: ${{ steps.get-alpha-version.outputs.version }}

      # NOTE: Intentionally NOT publishing to Foundry Hub for alpha releases
      - name: Alpha Release Created
        run: |
          echo "üß™ Alpha release created: ${{ steps.get-alpha-version.outputs.version }}"
          echo "üì¶ Download URL: https://github.com/${{github.repository}}/releases/download/${{ steps.get-alpha-version.outputs.version }}/module.zip"
          echo "üìã Manifest URL: https://github.com/${{github.repository}}/releases/download/${{ steps.get-alpha-version.outputs.version }}/module.json"
          echo "‚ö†Ô∏è  This is a pre-release and will NOT be published to Foundry Hub"